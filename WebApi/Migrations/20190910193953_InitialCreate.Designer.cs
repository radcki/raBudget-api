// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Contexts;

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190910193953_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApi.Models.Entities.Allocation", b =>
                {
                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AllocationDateTime");

                    b.Property<double>("Amount");

                    b.Property<int>("BudgetCategoryId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("AllocationId");

                    b.HasIndex("BudgetCategoryId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("WebApi.Models.Entities.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartingDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("BudgetId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("WebApi.Models.Entities.BudgetCategory", b =>
                {
                    b.Property<int>("BudgetCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AllocationsSum");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double?>("TransactionsSum");

                    b.Property<int>("Type");

                    b.HasKey("BudgetCategoryId");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("WebApi.Models.Entities.BudgetCategoryAmountConfig", b =>
                {
                    b.Property<int>("BudgetCategoryAmountConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BudgetCategoryId");

                    b.Property<double>("MonthlyAmount");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime?>("ValidTo");

                    b.HasKey("BudgetCategoryAmountConfigId");

                    b.HasIndex("BudgetCategoryId");

                    b.ToTable("BudgetCategoryAmountConfigs");
                });

            modelBuilder.Entity("WebApi.Models.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("BudgetCategoryId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("TransactionDateTime");

                    b.Property<int?>("TransactionScheduleId");

                    b.HasKey("TransactionId");

                    b.HasIndex("BudgetCategoryId");

                    b.HasIndex("TransactionScheduleId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WebApi.Models.Entities.TransactionSchedule", b =>
                {
                    b.Property<int>("TransactionScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("BudgetCategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("Frequency");

                    b.Property<int>("PeriodStep");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("TransactionScheduleId");

                    b.HasIndex("BudgetCategoryId");

                    b.ToTable("TransactionSchedules");
                });

            modelBuilder.Entity("WebApi.Models.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("DefaultBudgetId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZNetCS.AspNetCore.Logging.EntityFrameworkCore.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("WebApi.Models.Entities.Allocation", b =>
                {
                    b.HasOne("WebApi.Models.Entities.BudgetCategory", "BudgetCategory")
                        .WithMany("Allocations")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Entities.Budget", b =>
                {
                    b.HasOne("WebApi.Models.Entities.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Entities.BudgetCategory", b =>
                {
                    b.HasOne("WebApi.Models.Entities.Budget", "Budget")
                        .WithMany("BudgetCategories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Entities.BudgetCategoryAmountConfig", b =>
                {
                    b.HasOne("WebApi.Models.Entities.BudgetCategory", "BudgetCategory")
                        .WithMany("BudgetCategoryAmountConfigs")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Entities.Transaction", b =>
                {
                    b.HasOne("WebApi.Models.Entities.BudgetCategory", "BudgetCategory")
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.Entities.TransactionSchedule", "TransactionSchedule")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionScheduleId");
                });

            modelBuilder.Entity("WebApi.Models.Entities.TransactionSchedule", b =>
                {
                    b.HasOne("WebApi.Models.Entities.BudgetCategory", "BudgetCategory")
                        .WithMany("TransactionSchedules")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
